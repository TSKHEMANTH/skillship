//Intersection of two sorted Linked lists
/*Given two lists sorted in increasing order,
create a new list representing the intersection of the two lists. The new list should be made with its own memory â€” the original lists should not be changed.*/

// { Driver Code Starts
//

#include <bits/stdc++.h>
using namespace std;

struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};

Node* inputList(int size)
{
    Node *head, *tail;
    int val;
    
    cin>>val;
    head = tail = new Node(val);
    
    while(--size)
    {
        cin>>val;
        tail->next = new Node(val);
        tail = tail->next;
    }
    
    return head;
}

void printList(Node* n)
{
    while(n)
    {
        cout<< n->data << " ";
        n = n->next;
    }
}

Node* findIntersection(Node* head1, Node* head2);

int main()
{
	int t;
	cin>>t;
	while(t--)
	{
	    int n,m;
	    cin>> n >> m;
	    
	    Node* head1 = inputList(n);
	    Node* head2 = inputList(m);
	    
	    Node* result = findIntersection(head1, head2);
	    
	    printList(result);
	    cout<< endl;
	}
	return 0;
}
// } Driver Code Ends


/* The structure of the Linked list Node is as follows:

struct Node
{
    int data;
    Node *next;
    Node(int val)
    {
        data=val;
        next=NULL;
    }
};

*/
struct Node *root=NULL;
void append( struct Node **root,int n)
{
    struct Node *temp;
    temp=(struct Node*)malloc(sizeof(struct Node));
    temp->data=n;
    temp->next=NULL;
    if(*root==NULL)
    {
        *root=temp;
    }
    else
    {
        struct Node*p;
        p=*root;
        while(p->next!=NULL)
        {
            p=p->next;
        }
        p->next=temp;
    }
}

Node* findIntersection(Node* head1, Node* head2)
{
    // Your Code Here
    struct Node *temp1=head1;
    struct Node *temp2=head2;
    struct Node *root=NULL;
    while(temp1!=NULL )
    {
        if(temp1->data==temp2->data)
        {
            append(&root,temp1->data);
            temp1=temp1->next;
            temp2=head2;
        }
        else
        {
            if(temp2->next!=NULL)
            {
            temp2=temp2->next;}
            else
            {
                temp1=temp1->next;
                temp2=head2;
            }
        }
    }
    return (root);
}
